// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolairxExample.DataAccess.Data;

#nullable disable

namespace SolairxExample.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250605181728_initialDbSetup")]
    partial class initialDbSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SolairxExample.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SolairxExample.Model.Employee", b =>
                {
                    b.Property<int>("EmplyeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmplyeeId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Modified_Date");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("EmplyeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmplyeeId = 1,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9674),
                            Email = "ddepass@gmail.com",
                            FirstName = "Dwight",
                            LastName = "DePass",
                            Phone = "3059895416",
                            PositionId = 1
                        },
                        new
                        {
                            EmplyeeId = 2,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9710),
                            FirstName = "Andrew",
                            LastName = "Peart",
                            PositionId = 1
                        });
                });

            modelBuilder.Entity("SolairxExample.Model.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Job_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Job_Description");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Job_Name");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(8944),
                            JobDescription = "Private Home",
                            JobName = "Residential"
                        },
                        new
                        {
                            JobId = 2,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9009),
                            JobDescription = "Solar Energy",
                            JobName = "Solar Energy"
                        },
                        new
                        {
                            JobId = 3,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9016),
                            JobDescription = "Wind Energy",
                            JobName = "Wind Energy"
                        },
                        new
                        {
                            JobId = 4,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9023),
                            JobDescription = "Place of Business",
                            JobName = "Commercial"
                        },
                        new
                        {
                            JobId = 5,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9030),
                            JobDescription = "Installation",
                            JobName = "Installation"
                        },
                        new
                        {
                            JobId = 6,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9036),
                            JobDescription = "Maintenance",
                            JobName = "Maintenance"
                        },
                        new
                        {
                            JobId = 7,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9042),
                            JobDescription = "Repair",
                            JobName = "Repair"
                        },
                        new
                        {
                            JobId = 8,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9048),
                            JobDescription = "Request for quote",
                            JobName = "Request for quote"
                        },
                        new
                        {
                            JobId = 9,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9054),
                            JobDescription = "Financing",
                            JobName = "Financing"
                        },
                        new
                        {
                            JobId = 10,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9060),
                            JobDescription = "Inquiry",
                            JobName = "Inquiry"
                        });
                });

            modelBuilder.Entity("SolairxExample.Model.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9445),
                            Description = "Manager of particular project",
                            PositionName = "Project Manager"
                        },
                        new
                        {
                            PositionId = 2,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9468),
                            Description = "Administration Supervisor",
                            PositionName = "Supervisor"
                        },
                        new
                        {
                            PositionId = 3,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9473),
                            Description = "Administration Manager",
                            PositionName = "Manager"
                        },
                        new
                        {
                            PositionId = 4,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9479),
                            Description = "Administration Accountant",
                            PositionName = "Accountant"
                        },
                        new
                        {
                            PositionId = 5,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9483),
                            Description = "Operation",
                            PositionName = "Technician"
                        });
                });

            modelBuilder.Entity("SolairxExample.Model.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Modified_Date");

                    b.Property<string>("ProjectLongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectManager")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectShortDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectManager");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9903),
                            ProjectLongDesc = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><p><br></p><p><br></p>",
                            ProjectManager = 2,
                            ProjectName = "Andrew First Project",
                            ProjectShortDesc = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&nbsp;</p><p><br></p>"
                        },
                        new
                        {
                            ProjectId = 2,
                            CreateDate = new DateTime(2025, 6, 5, 14, 17, 25, 859, DateTimeKind.Local).AddTicks(9923),
                            ProjectLongDesc = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br></p>",
                            ProjectManager = 2,
                            ProjectName = "Andrew Second Project",
                            ProjectShortDesc = "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&nbsp;<br></p>"
                        });
                });

            modelBuilder.Entity("SolairxExample.Model.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("SolairxExample.Model.SpamTbl", b =>
                {
                    b.Property<int>("SpamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Spam_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpamId"));

                    b.Property<bool>("Commercial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Residential")
                        .HasColumnType("bit");

                    b.HasKey("SpamId");

                    b.ToTable("SpamTbls");
                });

            modelBuilder.Entity("SolairxExample.Model.WebClient", b =>
                {
                    b.Property<int>("WcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WC_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WcId"));

                    b.Property<bool>("Commercial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Residential")
                        .HasColumnType("bit");

                    b.HasKey("WcId");

                    b.ToTable("WebClients");

                    b.HasData(
                        new
                        {
                            WcId = 1,
                            Commercial = false,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 860, DateTimeKind.Local).AddTicks(5),
                            Email = "ddepass@gmail.com",
                            FirstName = "Dwight",
                            LastName = "DePass",
                            Message = "<p>Test</p>",
                            Phone = "1-305-989-5416",
                            Residential = true
                        },
                        new
                        {
                            WcId = 2,
                            Commercial = false,
                            DateModified = new DateTime(2025, 6, 5, 14, 17, 25, 860, DateTimeKind.Local).AddTicks(13),
                            Email = "dwight@dreadscout.com",
                            FirstName = "Regine",
                            LastName = "DePass",
                            Message = "<p>Test</p>",
                            Phone = "1-305-989-5416",
                            Residential = true
                        });
                });

            modelBuilder.Entity("SolairxExample.Model.WebClientIntJob", b =>
                {
                    b.Property<int>("WcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WC_id");

                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Job_id");

                    b.HasKey("WcId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("WebClientIntJobs");
                });

            modelBuilder.Entity("SolairxExample.Model.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolairxExample.Model.Employee", b =>
                {
                    b.HasOne("SolairxExample.Model.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Employee_Postion");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SolairxExample.Model.Project", b =>
                {
                    b.HasOne("SolairxExample.Model.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManager")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Project_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SolairxExample.Model.ProjectImage", b =>
                {
                    b.HasOne("SolairxExample.Model.Project", "Project")
                        .WithMany("ProjectImages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SolairxExample.Model.WebClientIntJob", b =>
                {
                    b.HasOne("SolairxExample.Model.Job", "Job")
                        .WithMany("WebClientIntJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Web_Client_INT_Jobs_Jobs");

                    b.HasOne("SolairxExample.Model.WebClient", "Wc")
                        .WithMany("WebClientIntJobs")
                        .HasForeignKey("WcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Web_Client_INT_Jobs_Web_Client");

                    b.Navigation("Job");

                    b.Navigation("Wc");
                });

            modelBuilder.Entity("SolairxExample.Model.ApplicationUser", b =>
                {
                    b.HasOne("SolairxExample.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SolairxExample.Model.Employee", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SolairxExample.Model.Job", b =>
                {
                    b.Navigation("WebClientIntJobs");
                });

            modelBuilder.Entity("SolairxExample.Model.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SolairxExample.Model.Project", b =>
                {
                    b.Navigation("ProjectImages");
                });

            modelBuilder.Entity("SolairxExample.Model.WebClient", b =>
                {
                    b.Navigation("WebClientIntJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
